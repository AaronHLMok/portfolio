/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab02;

import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.opentest4j.AssertionFailedError;
import org.w3c.dom.css.Rect;

import static org.junit.jupiter.api.Assertions.*;


/*For this lab, I will draw all my rectangles first width then height from the origin point which are the given
* xy values. From the origin, Width will be drawn to the right on the X axis and Height will be drawn downward
* on the y-axis, meaning the origin point is the upper left corner of the rectangle. In hindsight, some of the
* tests could be combined, but I thought I would be better to just have a test of each bullet point*/

class LibraryTest {
    @Test
    void testHarnessWorking() {
        assertTrue(true);
    }

    @Test //Question 1, Width and Height must be > than 0
    void testPositive(){
        //Create rectangle we know that has width/height > 0, must return true
        Rectangle r = new Rectangle();
        assertTrue(r.getWidth() > 0);
        assertTrue(r.getHeight() > 0);

        /*Create rectangle we know width/height <= 0, must return false
        Rectangle r2 = new Rectangle(0,0,0,0);
        assertFalse(r2.getWidth() > 0);
        assertFalse(r2.getHeight() > 0);
        */

        //New test after question 7
        assertThrows(IllegalArgumentException.class, () -> {Rectangle r2 = new Rectangle(0,0,0,0);});
    }

    @Test //Question 2, Find upper left location of Rectangle
    /*As mentioned by the notes above, origin is the given xy coordinates meaning we just have to return
    * the xy values used to construct the rectangle*/
    void testLocation(){
        //Test default rectangle
        Rectangle r = new Rectangle();
        assertEquals(0, r.getX());
        assertEquals(0, r.getY());

        //Test custom rectangle
        Rectangle r2 = new Rectangle(1,1,1,1);
        assertEquals(1, r2.getX());
        assertEquals(1, r2.getY());
    }

    @Test //Question 3, Use new Rectangle() to create a rectangle with upper left of 0,0 and w/h of 1,1
    /*In the rectangle class, we have a default construction where if no parameters are given
    * we will create a rectangle of 0,0,1,1. To test we just create the default and compare the values*/
    void defaultRectangleX() {
        Rectangle r = new Rectangle();
        assertEquals(0, r.getX());
        assertEquals(0, r.getY());
        assertEquals(1, r.getWidth());
        assertEquals(1, r.getHeight());
    }

    @Test //Question 4, Create a custom rectangle with the given values at time of creation
    /*This part goes to David. In the test here we just test the values used to create the rectangle
    * The construction itself is in the Rectangle Class*/
    void customRect(){
        Rectangle r = new Rectangle(5,5,10,10);
        assertEquals(5,r.getX());
        assertEquals(5,r.getY());
        assertEquals(10,r.getWidth());
        assertEquals(10,r.getHeight());
    }

    @Test //Question 5, Fetch xy,width and height of the rectangle
    /*This section was also mostly completed with David, the get method is in Rectangle Class.
    * All we have to do here in the test is just check the values*/
    void fetchValues(){
        Rectangle r = new Rectangle(2,2,5,5);
        assertEquals(2,r.getX());
        assertEquals(2,r.getY());
        assertEquals(5,r.getWidth());
        assertEquals(5,r.getHeight());
    }

    @Test //Question 6, Change values to a given rectangle
    /*Create a default rectangle, change its values then check*/
    void changeValues(){
        Rectangle r = new Rectangle();
        r.setX(2);
        r.setY(2);
        r.setWidth(5);
        r.setHeight(5);

        assertEquals(2, r.getX());
        assertEquals(2, r.getY());
        assertEquals(5, r.getWidth());
        assertEquals(5, r.getHeight());
    }

    @Test //Question 7, Any operations which leads to invalid rectangles must throw exception
    /*At this point, I had to run back to testPositive() to change the test from boolean to
    * throws due to Rectangle class no longer allowing any integers <= 0 to be written to width/height*/
    void exceptionTest(){
        //create invalid rectangle of negative width and height
        assertThrows(IllegalArgumentException.class, () -> {Rectangle r = new Rectangle(0,0,-1,-1);});

        //Change valid rectangle values into invalid ones
        Rectangle r2 = new Rectangle();
        assertThrows(IllegalArgumentException.class, () -> {r2.setWidth(-5);});

        Rectangle r3 = new Rectangle();
        assertThrows(IllegalArgumentException.class, () -> {r3.setHeight(-5);});
    }

    @Test //Question 8, Test rectangles for equality
    /*We need to override equals() function in rectangle class*/
    void equalityTest(){
        Rectangle r = new Rectangle();
        Rectangle r2 = new Rectangle();
        Rectangle r3 = new Rectangle(0,0,1,2);

        assertTrue(r.equals(r2));
        assertFalse(r.equals(r3));
    }

    @Test //Question 9, Calculate Area of the Rectangle
    /*To test, we should create a rectangle and have Rectangle class to calculate it
    * because we already have testPostive() we don't need to check if width or height is <= 0*/
    void areaTest(){
        Rectangle r = new Rectangle();
        Rectangle r2 = new Rectangle(0,0,5,5);

        assertEquals(1, r.getArea());
        assertEquals(25, r2.getArea());

    }

    @Test //Question 10, check if a rectangle exists within another
    /*Note, if a rectangle is equal, meaning they overlap then it is considered within another rectangle in this case
    * For example if r1 <= r2 then r1 exists within r2*/
    void rectangularInception(){
        Rectangle r = new Rectangle(0,0,2,2);
        Rectangle r2 = new Rectangle(0,0,2,2);
        Rectangle r3 = new Rectangle();
        Rectangle r4 = new Rectangle(0,0,4,4);
        Rectangle r5 = new Rectangle(5,5,5,5);
        Rectangle r6 = new Rectangle(6,6,1,1);
        Rectangle r7 = new Rectangle(6,6,5,5);

        //Test equality, if two rectangles are the same it is considered within another
        assertTrue(r.equals(r2));

        //Test strictly smaller (within)
        assertTrue(r.rectangleBoundary(r3));

        //Test strictly larger (outside)
        assertFalse(r.rectangleBoundary(r4));

        //Test strictly smaller (within)
        assertTrue(r4.rectangleBoundary(r));

        //Outlier test
        assertTrue(r5.rectangleBoundary(r6));
        assertFalse(r5.rectangleBoundary(r));
        assertFalse(r6.rectangleBoundary(r));
        assertFalse(r5.rectangleBoundary(r7));
    }

}